{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/자바스크립트","result":{"pageContext":{"currentCategory":"자바스크립트","categories":["All","자바스크립트","RxJS"],"edges":[{"node":{"id":"ad87742e-37d4-58a6-ab53-c0dd1bd8bedd","excerpt":"는 인스턴스를 생성할 때 라는 함수를 인수로 전달받는다. 여기서  함수는 , 라는 함수를 인수로 전달받게 된다. 따라서 와 동일한 인터페이스를 갖는 객체를 만드려면 와 라는 함수를 매개변수로 사용하는 를 전달받을 수 있도록 를 구성해야 할 것이다. 인스턴스를 생성한 이후  내부의 값을 소비(consume)하려면 크게 세 가지 방법을 사용할 수 있다.  가 거나  상태인 경우에 호출할 함수들을 전달받는다.  가  상태인 경우 호출할 함수를 전달받는다.  가  상태인지  상태인지 상관없이 호출할 함수를 전달받는데 이 함수는 과 에 전달한 함수들이 모두 실행된 이후에 호출된다. 그렇다면 객체를 구성하기 위한 많은 방법들이 …","fields":{"slug":"/promise-implementation/"},"frontmatter":{"categories":"자바스크립트","title":"Promise","date":"August 13, 2021"}},"next":{"fields":{"slug":"/transducing/"}},"previous":{"fields":{"slug":"/observable/"}}},{"node":{"id":"1ac3d648-a8ef-574f-8dc2-e1a28fea5e0d","excerpt":"위의 상황에서 코드는 문제없이 동작하지만 많은 요소를 갖는 배열에 대해서는 을 호출할 때마다 즉, 메서드 체이닝을 수행할 때마다 원본 배열과 동일한 크기의 중간 배열을 지속적으로 생성한다는 문제가 있다. 또한 이전 메서드의 호출 결과가 반환되기 이전에는 다음 메서드 호출이 수행되지 않으므로 각 메서드의 수행 시간을 모두 합친 만큼의 blocking이 발생하게 될 것이다. 그렇다면 중간 배열을 생성하지 않고, 최종 결과로 반환될 배열만 추가로 생성하게끔 구현하려면 어떻게 해야할까? 첫 번째 아이디어로는 인접한  함수들을 합성하는 방식을 떠올릴 수 있을 것이다. 그렇다면 이번에는 를 체이닝하여 사용하는 경우를 살펴보자. …","fields":{"slug":"/transducing/"},"frontmatter":{"categories":"자바스크립트","title":"Transducing","date":"August 09, 2021"}},"next":{"fields":{"slug":"/more-safety-getter-setter/"}},"previous":{"fields":{"slug":"/promise-implementation/"}}},{"node":{"id":"e803c0c9-6228-512f-9623-eab015c794b0","excerpt":"다음 코드의 결과는 무엇인지 확인해보자. 그렇다면 코드가 다음과 같이 수정되었을때 라는 배열의 첫 번째 요소는 이전과 동일하게 1일까? 이는 의 구현에 따라 달라진다. 만약 의 구현이 다음과 같다면 배열의 첫 번째 요소는 4가 될 것이다. 즉, 이는 코드의 순서에 따라 다른 결과를 만들어내게 된 상황인데, 이러한 현상이 발생하는 원인은 인수로 전달한 값이 “배열”이라는 객체 타입의 값이므로 해당 배열을 가리키는 참조 값이 복사되어 전달되었기 때문이다. 물론 이처럼 짧은 코드에서는 원본이 변경되지 않도록 코드의 순서에 유념해서 문(statement)들을 배치할 수 있을 것이다. 하지만 만약 해당 코드가 매우 복잡한 비즈…","fields":{"slug":"/more-safety-getter-setter/"},"frontmatter":{"categories":"자바스크립트","title":"보다 안전한 getter, setter 만들기","date":"August 03, 2021"}},"next":null,"previous":{"fields":{"slug":"/transducing/"}}}]}},"staticQueryHashes":["1073350324","2938748437"]}