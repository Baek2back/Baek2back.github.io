{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/RxJS","result":{"pageContext":{"currentCategory":"RxJS","categories":["All","자바스크립트","RxJS"],"edges":[{"node":{"id":"7ba81867-4280-5d6d-bcb0-5caa4e1554c2","excerpt":"RxJS에서 연산자(operator)는 현재 Observable을 기반으로 새로운 Observable을 생성하는 순수 함수이다. 이때 Observable은 불변 객체이므로 현재의 Observable 인스턴스는 변경되지 않고 항상 새로운 Observable을 만든다. map, filter, reduce 그렇다면 우선 대표적인 연산자인 , , 에 대한 구현을 살펴보자. 에 정의된 메서드와는 달리 이번에는 Observable에 대해서 적용할 수 있도록 해야한다. USE-CASE , ,  연산자는 RxJS에서는 연산자로 구분되지만 반환하는 타입을 살펴보면 (Observable ⇒ Observable)인 것을 알 수 있다. 따…","fields":{"slug":"/operators/"},"frontmatter":{"categories":"RxJS","title":"Operators","date":"August 17, 2021"}},"next":{"fields":{"slug":"/observable/"}},"previous":null},{"node":{"id":"fea861e0-9c53-5e79-91dc-ee29a1a0dc69","excerpt":"Observer Pattern 이 무엇인지 이해하기 위해서는 우선 옵서버 패턴(Observer Pattern)에 대한 이해가 필요하다. Loosely Coupling 옵서버 패턴에서는 시간이 경과함에 따라 상태가 변경되는 대상을 Subject라 한다. 또 이때 Subject의 상태 변화를 관찰 혹은 상태 변화에 대한 알림을 받는 대상을 Observer라 한다. Subject와 Observer는 느슨한 결합(Loosely Coupling) 상태로 이는 서로 상호작용은 하는 상태이지만 각자에 대해서는 잘 알지 못한다는 것을 의미한다. Subject가 Observer에 대해 알고 있는 사실은 Observer가 특정 인터페이…","fields":{"slug":"/observable/"},"frontmatter":{"categories":"RxJS","title":"Observable","date":"August 15, 2021"}},"next":{"fields":{"slug":"/promise-implementation/"}},"previous":{"fields":{"slug":"/operators/"}}}]}},"staticQueryHashes":["1073350324","2938748437"]}