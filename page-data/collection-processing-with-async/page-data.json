{"componentChunkName":"component---src-templates-blog-template-js","path":"/collection-processing-with-async/","result":{"data":{"cur":{"id":"d85ab55d-a76c-5b83-8488-f16e67308e16","html":"<p><a href=\"https://baek2back.github.io/operators/\">Operator</a> 포스팅을 작성하면서 다음과 같은 코드에서 <code class=\"language-text\">observer.next()</code>의 호출은 순차적으로 처리된다. 이전 순회에서 <code class=\"language-text\">next()</code>가 호출된 이후 500ms를 <code class=\"language-text\">sleep</code>하는 것이 보장되는 상황이다.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">createInnerObservable</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Observable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>observer<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">await</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">        observer<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">*</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">}</span></span>      observer<span class=\"token punctuation\">.</span><span class=\"token function\">complete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>하지만 기본적으로 <code class=\"language-text\">for...loop</code>는 <code class=\"language-text\">continue/break</code>의 사용, 너무 많은 일을 수행하는 중첩 루프 등 다분히 명령적(imperative)이라는 점에서 선언적(declarative) 프로그래밍을 추구하는 관점에서는 지양하는 것이 권장된다. 그렇다면 가장 먼저 떠올릴 수 있는 방식은 <code class=\"language-text\">Array.prototype.forEach</code>를 사용하는 방식으로 변경해보는 것이다.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">createInnerObservable</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Observable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>observer<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">await</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">      observer<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">*</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    observer<span class=\"token punctuation\">.</span><span class=\"token function\">complete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>하지만 의도와는 달리 이전 순회의 <code class=\"language-text\">next()</code>를 대기하지 않고 병렬적으로 <code class=\"language-text\">sleep</code>을 수행한 이후 각각의 <code class=\"language-text\">next()</code>가 호출되는 것을 알 수 있는데, <a href=\"https://baek2back.github.io/async-await/\">async/await</a> 포스팅을 작성하면서 살펴본 <code class=\"language-text\">async</code> 함수의 동작 방식을 생각해보면 <strong><code class=\"language-text\">async</code> 함수는 호출자를 block하지 않는다는 특징</strong>을 살펴보았다. <code class=\"language-text\">forEach</code>의 경우 컬렉션(이 경우에는 배열)을 순회하면서 전달받은 함수가 비동기 함수이든 동기 함수이든 호출만 하게 된다. 반면 <code class=\"language-text\">for...loop</code>에서 각각의 순회를 문으로 나열해보면 다음과 같이 표현될 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">createInnerObservable</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Observable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>observer<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      observer<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">*</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">await</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      observer<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">*</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">await</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      observer<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">*</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      observer<span class=\"token punctuation\">.</span><span class=\"token function\">complete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>즉, <code class=\"language-text\">for...loop</code>는 <code class=\"language-text\">forEach</code>와 달리 현재 실행 컨텍스트에서 각각의 Promise가 settled될 때까지 대기하는 형태로 함수 몸체의 문들이 실행되므로 의도한대로 순차적으로 처리될 수 있는 것이다. 그렇다면 “순차 처리를 하기 위해서는 <code class=\"language-text\">for...loop</code>가 갖는 한계를 감안하고서라도 무조건 사용해야 하는가”라면 분명 아쉬운 부분이 존재할 것이다. 그 대신 컬렉션을 다루는 고차 함수들이 선택적으로 병렬·순차 처리를 제공할 수 있게끔 하는 것이 일관성 측면에서도 더욱 좋은 해결 방안이 될 것이다.</p>\n<h2 id=\"async-functions-with-reduce\" style=\"position:relative;\"><a href=\"#async-functions-with-reduce\" aria-label=\"async functions with reduce permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Async functions with reduce</h2>\n<p>순차 처리에 대한 힌트는 <code class=\"language-text\">reduce</code>에서 얻을 수 있다. <code class=\"language-text\">reduce</code>에 전달한 reducer는 이전 연산의 결과와 현재 순회하고 있는 요소를 전달받아 값을 생성하고 이를 다음 reducer에게 전달하는 역할을 수행한다. 즉 다음 연산을 위해 이전 연산의 결과를 필요로 한다는 형태이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> syncRes <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>acc<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> acc <span class=\"token operator\">+</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsyncRes<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 6</span></code></pre></div>\n<p>이를 비동기 상황에 대해서도 적용해본다면 이전 reducer가 반환한 값이 Promise가 되고 해당 Promise가 settled되면 이후의 연산을 진행할 수 있게끔 설정한다면 동기 상황에서처럼 순차 처리가 가능할 것이다. 그렇다면 이전 연산의 결과가 Promise이므로 다음 연산에서 Promise가 settled될 때까지 대기할 수 있도록 <code class=\"language-text\">async reducer</code>를 전달하는 형태로 수정해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> asyncRes <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>acc<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> acc<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  asyncRes<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 6</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> ●───────→ <span class=\"token punctuation\">[</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span>\n                ↓\n         <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>await <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> + <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>: Promise<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                ↓\n      <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>await Promise<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">))</span> + <span class=\"token number\">2</span><span class=\"token punctuation\">]</span>: Promise<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n                ↓\n      <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>await Promise<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">))</span> + <span class=\"token number\">3</span><span class=\"token punctuation\">]</span> ───────→ ● <span class=\"token punctuation\">[</span>Promise<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></code></pre></div>\n<blockquote>\n<p><code class=\"language-text\">async</code> 함수는 무조건 Promise를 반환하기 때문에 reduce가 최종적으로 반환한 값 역시 Promise가 된다.</p>\n</blockquote>\n<h3 id=\"timing\" style=\"position:relative;\"><a href=\"#timing\" aria-label=\"timing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Timing</h3>\n<p>하지만 현재 상태로는 이전 연산의 결과가 settled될 때까지 대기한다는 점은 보장하지만 여전히 <code class=\"language-text\">sleep</code>은 각각의 <code class=\"language-text\">async reducer</code>에서 병렬적으로 수행된다. 그렇다면 우선 간략하게나마 <code class=\"language-text\">reduce</code>의 구현을 먼저 살펴보도록 하자.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> reducer<span class=\"token punctuation\">,</span> init<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> acc <span class=\"token operator\">=</span> init<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> value <span class=\"token keyword\">of</span> array<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    acc <span class=\"token operator\">=</span> <span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span>acc<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> acc<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">reduce</code>에 <code class=\"language-text\">async reducer</code>를 전달한 경우 reducer를 호출하면 <strong>각각의 <code class=\"language-text\">async reducer</code>는 호출자를 block하는 대신 Promise를 반환</strong>하게 된다. 다만 이전 연산의 결과에 종속이 존재하는 부분이 각각의 reducer의 어느 위치에 존재하느냐에 따라 다른 동작을 보이게 되는데 하나씩 살펴보도록 하자.</p>\n<h3 id=\"await-acc를-나중에-수행하기\" style=\"position:relative;\"><a href=\"#await-acc%EB%A5%BC-%EB%82%98%EC%A4%91%EC%97%90-%EC%88%98%ED%96%89%ED%95%98%EA%B8%B0\" aria-label=\"await acc를 나중에 수행하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>await acc를 나중에 수행하기</h3>\n<p>다음의 코드에서 <code class=\"language-text\">sleep</code>은 이전 연산의 결과에 대해 독립적인 작업이고, <code class=\"language-text\">await acc</code>는 이전 연산의 결과가 <code class=\"language-text\">resolve</code>되어야 참조할 수 있게 된다. 따라서 <code class=\"language-text\">async reducer</code>를 호출하면 함수 몸체에서 처음으로 만난 <code class=\"language-text\">await</code> 우측의 표현식이 평가되므로 각각의 reducer에서 모두 <code class=\"language-text\">sleep(10)</code>은 그 즉시 수행하게 될 것이다. 그 이후 이전 연산의 결과(<code class=\"language-text\">acc</code>)를 평가하게 되는데 각각의 <code class=\"language-text\">acc</code>는 이전 연산에 종속적이므로 연쇄적으로 Promise가 <code class=\"language-text\">resolve</code> 될 때까지 대기하게 될 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> startTime <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> asyncRes <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>acc<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> acc<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> startTime<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> ms</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 약 12ms 정도가 소요된다.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token punctuation\">[</span>reduce<span class=\"token punctuation\">]</span>\n    ●         ●         ●         ●\n    ┆───────→┌┴┐        ┆         ┆\n    ┆────────│ │──────→┌┴┐        ┆\n    ┆────────│ │───────│ │──────→┌┴┐\n    ┆       <span class=\"token punctuation\">[</span>       sleep<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>       <span class=\"token punctuation\">]</span>\n    ┆        │ │       │ │←──────│ │\n    ┆        │ │←──────│ │ await │ │\n    ┆        │ │ await │ │       │ │\n    ┆        └┬┘──────→│ │       │ │\n    ┆         ┆ <span class=\"token number\">1</span>      └┬┘──────→│ │\n    ┆         ┆         ┆ <span class=\"token number\">3</span>      └┬┘\n    ┆←────────────────────────────┘ <span class=\"token number\">6</span></code></pre></div>\n<h3 id=\"await-acc를-먼저-수행하기\" style=\"position:relative;\"><a href=\"#await-acc%EB%A5%BC-%EB%A8%BC%EC%A0%80-%EC%88%98%ED%96%89%ED%95%98%EA%B8%B0\" aria-label=\"await acc를 먼저 수행하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>await acc를 먼저 수행하기</h3>\n<p>하지만 문의 순서를 조금 바꾸어서 이전 연산의 결과를 먼저 <code class=\"language-text\">await</code>하는 형태로 변경하면 각각의 <code class=\"language-text\">async reducer</code>는 <code class=\"language-text\">sleep</code>을 병렬적으로 수행하지 않고, 순차적으로 수행하게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> startTime <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> asyncRes <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>acc<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> resolved <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> acc<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> resolved <span class=\"token operator\">+</span> value<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> startTime<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> ms</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 약 36ms 정도가 소요된다.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token punctuation\">[</span>reduce<span class=\"token punctuation\">]</span>\n    ●         ●         ●         ●\n    ┆───────→┌┴┐        ┆         ┆\n    ┆────────│ │──────→┌┴┐        ┆\n    ┆────────│ │───────│ │──────→┌┴┐\n    ┆        │ │       │ │←──────│ │\n    ┆        │ │←──────│ │ await │ │\n    ┆        │ │ await │ │       │ │\n    ┆    <span class=\"token punctuation\">[</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>   │ │       │ │\n    ┆        └┬┘──────→│ │       │ │\n    ┆         ┆ <span class=\"token number\">1</span>  <span class=\"token punctuation\">[</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>   │ │\n    ┆         ┆        └┬┘──────→│ │\n    ┆         ┆         ┆ <span class=\"token number\">3</span>  <span class=\"token punctuation\">[</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    ┆         ┆         ┆        └┬┘\n    ┆←────────────────────────────┘ <span class=\"token number\">6</span></code></pre></div>\n<p>따라서 이제 <code class=\"language-text\">async reducer</code>의 설계에 따라 순차 처리와 병렬 처리를 선택할 수 있게끔 하는 인터페이스를 제공할 수 있는 실마리를 찾았다.</p>\n<p>자원을 많이 소비하기는 하지만 그만큼 속도가 중요한 상황이라면 병렬적으로, 실행 순서 혹은 자원 절약이 더욱 중요한 상황이라면 순차 처리를 수행하게끔 reducer를 설계하면 된다.</p>\n<h2 id=\"async-functions-with-map\" style=\"position:relative;\"><a href=\"#async-functions-with-map\" aria-label=\"async functions with map permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Async functions with map</h2>\n<p><code class=\"language-text\">map</code> 역시 일반적으로 컬렉션을 다룰 때 사용하는 대표적인 함수이다. 비동기 상황에서 <code class=\"language-text\">map</code>을 이용하려면 고려해야 할 사항이 크게 두 가지가 존재한다. 첫 번째는 모든 요소들을 새로운 값을 갖는 Promise로 래핑해야 한다. 두 번째는 컬렉션 내의 모든 Promise가 settled될 때까지 기다릴 수 있어야 한다. 이러한 두 가지 요구 사항을 충족시키는 API는 <code class=\"language-text\">Promise.all</code>이 있다. 따라서 일반적으로 다음과 같은 패턴으로 비동기 상황에서 <code class=\"language-text\">map</code>을 수행하게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> asyncRes <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>\n    arr<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">before: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">await</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">after: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> value <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// before 1</span>\n  <span class=\"token comment\">// before 2</span>\n  <span class=\"token comment\">// before 3</span>\n  <span class=\"token comment\">// after 1</span>\n  <span class=\"token comment\">// after 2</span>\n  <span class=\"token comment\">// after 3</span>\n  asyncRes<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [2, 3, 4]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">  <span class=\"token punctuation\">[</span>map<span class=\"token punctuation\">]</span>\n    ●         ●         ●         ●\n    ┆1──────→┌┴┐        ┆         ┆\n    ┆2───────│ │──────→┌┴┐        ┆\n    ┆3───────│ │───────│ │──────→┌┴┐\n    ┆       <span class=\"token punctuation\">[</span>       sleep<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>       <span class=\"token punctuation\">]</span>\n    ┆        │ │       │ │       │ │\n    ┆←──── <span class=\"token number\">2</span> └┬┘───────└┬┘       └┬┘\n    ┆←────────┆────── <span class=\"token number\">3</span> ┘         │\n    ┆←────────┆──────────────── <span class=\"token number\">4</span> ┘</code></pre></div>\n<p>여기서도 <code class=\"language-text\">sleep</code>은 병렬적으로 수행된다. 하지만 처음의 의도는 순차 처리와 병렬 처리를 선택적으로 제공할 수 있게끔 하는 것이 목적이었으므로 앞서 살펴본 reduce를 이용하면 이전 연산의 결과가 <code class=\"language-text\">resolve</code>될 때까지 다음 <code class=\"language-text\">async reducer</code>에서 대기하게끔 설계할 수 있을 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> asyncRes <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>acc<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> resolved <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> acc<span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">before: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">after: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>acc<span class=\"token punctuation\">,</span> value <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// before: 1</span>\n  <span class=\"token comment\">// after: 1</span>\n  <span class=\"token comment\">// before: 2</span>\n  <span class=\"token comment\">// after: 2</span>\n  <span class=\"token comment\">// before: 3</span>\n  <span class=\"token comment\">// after: 3</span>\n\n  asyncRes<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [2, 3, 4]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token punctuation\">[</span>reduce<span class=\"token punctuation\">]</span>\n    ●         ●         ●         ●\n    ┆<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>─────→┌┴┐        ┆         ┆\n    ┆←──────2└┬┘        ┆         ┆\n    ┆<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>──────┆───────→┌┴┐        ┆\n    ┆←────────┆───────3└┬┘        ┆\n    ┆<span class=\"token punctuation\">[</span><span class=\"token number\">2,3</span><span class=\"token punctuation\">]</span>────┆─────────┆───────→┌┴┐\n    ┆←────────┆─────────┆───────4└┬┘</code></pre></div>\n<h2 id=\"async-functions-with-foreach\" style=\"position:relative;\"><a href=\"#async-functions-with-foreach\" aria-label=\"async functions with foreach permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Async functions with forEach</h2>\n<p><code class=\"language-text\">forEach</code> 역시 <code class=\"language-text\">map</code>과 유사하지만 값에 함수를 적용하고 함수가 반환한 값을 요소로 갖는 새로운 컬렉션을 생성하는 대신 <code class=\"language-text\">forEach</code>는 각각의 요소에 대해 함수를 호출하기만 하고 결과는 버린다는 차이가 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\narr<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 1</span>\n<span class=\"token comment\">// 2</span>\n<span class=\"token comment\">// 3</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Finish in Sync'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Finish in Sync</span></code></pre></div>\n<p>그렇다면 비동기 상황에 대해서도 위와 동일한 결과를 얻기 위해 대부분이 시도하는 방법은 글의 서두에서처럼 <code class=\"language-text\">forEach</code>의 <code class=\"language-text\">callbackFn</code>에 <code class=\"language-text\">async</code> 함수를 전달하는 방법일 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">-</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Finish in async'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Finish in async</span>\n<span class=\"token comment\">// 3</span>\n<span class=\"token comment\">// 2</span>\n<span class=\"token comment\">// 1</span></code></pre></div>\n<p>하지만 콘솔에 출력된 결과를 살펴보면 우선 <code class=\"language-text\">forEach</code>에 전달한 <code class=\"language-text\">callbackFn</code>이 호출되더라도 block이 발생하지 않는다. 거기에 <code class=\"language-text\">sleep</code> 역시 병렬적으로 수행되어 가장 짧은 대기 시간을 갖는 3번째 요소가 가장 먼저 출력되었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token punctuation\">[</span>forEach<span class=\"token punctuation\">]</span>\n      ●         ●         ●         ●\n     ┌┴┐──────→┌┴┐        ┆         ┆\n     │ │───────│ │──────→┌┴┐        ┆\n     │ │───────│ │───────│ │──────→┌┴┐\n<span class=\"token keyword\">done</span> └┬┘       │ │       │ │       └┬┘3\n      ┆        │ │       └┬┘2       ┆\n      ┆        └┬┘1       ┆         ┆</code></pre></div>\n<p>그렇다면 이번에도 역시 <code class=\"language-text\">reduce</code>를 이용한다면 비동기 상황에서도 순차적인 처리를 보장할 수 있게 될 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">await</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>acc<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> acc<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">-</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Finish in async'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 1</span>\n  <span class=\"token comment\">// 2</span>\n  <span class=\"token comment\">// 3</span>\n  <span class=\"token comment\">// Finish in async</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token punctuation\">[</span>reduce<span class=\"token punctuation\">]</span>\n      ●         ●         ●         ●\n     ┌┴┐──────→┌┴┐        ┆         ┆\n     │ │←──────└┬┘1       ┆         ┆\n     │ │────────┆───────→┌┴┐        ┆\n     │ │        ┆        └┬┘2       ┆\n     │ │────────┆─────────┆───────→┌┴┐\n     │ │←───────┆─────────┆────────└┬┘3\n<span class=\"token keyword\">done</span> └┬┘        ┆         ┆         ┆</code></pre></div>\n<h2 id=\"async-functions-with-filter\" style=\"position:relative;\"><a href=\"#async-functions-with-filter\" aria-label=\"async functions with filter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Async functions with filter</h2>\n<p><code class=\"language-text\">filter</code>의 경우는 조금 복잡한데, 기본적으로 Promise는 **“truthy”**하기 때문에 <code class=\"language-text\">map</code>을 이용하여 <code class=\"language-text\">true</code> 또는 <code class=\"language-text\">false</code>를 갖는 배열을 만든 후, 원본 컬렉션에 <code class=\"language-text\">filter</code>를 적용하여 값이 <code class=\"language-text\">true</code>인 요소와 동일한 인덱스에 위치한 요소만 취해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">asyncFilter</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> predicate<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> results <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>predicate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> results<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>하지만 <code class=\"language-text\">filter</code> 역시 <code class=\"language-text\">reduce</code>를 통해 수행하는 것이 가능하므로 우선 <code class=\"language-text\">reduce</code>를 이용한 병렬 처리부터 살펴보도록 하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">asyncFilter</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> predicate<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>acc<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      <span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> <span class=\"token function\">predicate</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> acc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span>\n        <span class=\"token operator\">:</span> acc<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">asyncFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> value <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">  <span class=\"token punctuation\">[</span>filter<span class=\"token punctuation\">]</span>  <span class=\"token punctuation\">[</span>reduce<span class=\"token punctuation\">]</span>\n      ●         ●         ●         ●         ●\n      ┆<span class=\"token punctuation\">[</span><span class=\"token number\">1,2</span>,3<span class=\"token punctuation\">]</span>─→┆───────→┌┴┐        ┆         ┆\n      ┆         ┆────────│ │──────→┌┴┐        ┆\n      ┆         ┆────────│ │───────│ │──────→┌┴┐\n      ┆         ┆       <span class=\"token punctuation\">[</span> await predicate<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span>\n      ┆         ┆        │ │       │ │←await─│ │\n      ┆         ┆        │ │←await─│ │       │ │\n      ┆         ┆        └┬┘<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>────→│ │       │ │\n      ┆         ┆         ┆        └┬┘<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>───→│ │\n      ┆←<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>─────┆←<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>─────┆─────────┆────────└┬┘</code></pre></div>\n<p><code class=\"language-text\">await acc</code>를 수행하기 전에 <code class=\"language-text\">await predicate(value)</code>가 위치한 상태이므로 각각의 <code class=\"language-text\">predicate(value)</code>는 병렬적으로 수행된다.</p>\n<p>그렇다면 이번에는 순차 처리의 경우를 생각해보자. 간단하게 문의 순서를 바꿔주면 된다. 즉 <code class=\"language-text\">await acc</code>를 수행한 이후에 <code class=\"language-text\">predicate</code>를 수행하게끔 바꾸는 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">asyncFilter</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> predicate<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>acc<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span>\n      <span class=\"token operator\">...</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> acc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token operator\">...</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> <span class=\"token function\">predicate</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">  <span class=\"token punctuation\">[</span>filter<span class=\"token punctuation\">]</span>  <span class=\"token punctuation\">[</span>reduce<span class=\"token punctuation\">]</span>\n      ●         ●         ●         ●         ●\n      ┆<span class=\"token punctuation\">[</span><span class=\"token number\">1,2</span>,3<span class=\"token punctuation\">]</span>─→┆───────→┌┴┐        ┆         ┆\n      ┆         ┆────────│ │──────→┌┴┐        ┆\n      ┆         ┆────────│ │───────│ │──────→┌┴┐\n      ┆         ┆        │ │       │ │← acc ─│ │\n      ┆         ┆        │ │← acc ─│ │       │ │\n      ┆         ┆ <span class=\"token punctuation\">[</span>predicate<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>   │ │       │ │\n      ┆         ┆        └┬┘<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>────→│ │       │ │\n      ┆         ┆         ┆   <span class=\"token punctuation\">[</span>predicate<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> │ │\n      ┆         ┆         ┆        └┬┘<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>───→│ │\n      ┆         ┆         ┆         ┆   <span class=\"token punctuation\">[</span>predicate<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n      ┆←<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>─────┆←<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>─────┆─────────┆────────└┬┘</code></pre></div>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ul>\n<li><a href=\"https://www.amazon.com/Asynchronous-Programming-Patterns-Javascript-Promises-ebook/dp/B08VN4N3G6\">Asynchronous Programming Patterns in JavaScript</a></li>\n</ul>","excerpt":"Operator 포스팅을 작성하면서 다음과 같은 코드에서 의 호출은 순차적으로 처리된다. 이전 순회에서 가 호출된 이후 500ms를 하는 것이 보장되는 상황이다. 하지만 기본적으로 는 의 사용, 너무 많은 일을 수행하는 중첩 루프 등 다분히 명령적(imperative)이라는 점에서 선언적(declarative) 프로그래밍을 추구하는 관점에서는 지양하는 것이 권장된다. 그렇다면 가장 먼저 떠올릴 수 있는 방식은 를 사용하는 방식으로 변경해보는 것이다. 하지만 의도와는 달리 이전 순회의 를 대기하지 않고 병렬적으로 을 수행한 이후 각각의 가 호출되는 것을 알 수 있는데, async/await 포스팅을 작성하면서 살펴본  …","frontmatter":{"date":"August 20, 2021","title":"Collection processing with async","categories":"자바스크립트","author":"Baek2back","emoji":"🧩"},"fields":{"slug":"/collection-processing-with-async/"}},"next":{"id":"161881c0-e574-5904-849b-aa08884386a4","html":"<p><code class=\"language-text\">async/await</code>의 동작 원리를 살펴보기에 앞서 generator에 대한 이해를 위해 iterable, iterator, iteration result에 대한 개념을 정리해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Iterable<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Iterator<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Iterator<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> IterationResult<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IterationResult<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n  value<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n  done<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><strong>Iterable</strong>: <code class=\"language-text\">[Symbol.iterator]</code> 메서드를 구현한 객체</li>\n<li><strong>Iterator</strong> : <code class=\"language-text\">next</code> 메서드를 구현한 객체</li>\n<li><strong>IterationResult</strong>: <code class=\"language-text\">value</code>, <code class=\"language-text\">done</code>이라는 프로퍼티를 갖고 있는 객체</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">Iterable<span class=\"token punctuation\">[</span>Symbol.iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n             │\n             └→ Iterator ─→ Iterator.next<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                                      │\n                                      └─→ IterationResult</code></pre></div>\n<h2 id=\"generator\" style=\"position:relative;\"><a href=\"#generator\" aria-label=\"generator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Generator</h2>\n<p>제너레이터는 특수한 함수로써 일반 함수와는 다르게 호출 시 함수 몸체를 바로 실행하는 것이 아니라 <strong>IterableIterator</strong>(Iterable이면서 Iterator인) 객체를 반환한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IterableIterator<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Iterator<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> IterableIterator<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"yield\" style=\"position:relative;\"><a href=\"#yield\" aria-label=\"yield permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>yield</h2>\n<p><code class=\"language-text\">yield</code>는 제너레이터 함수 몸체 내부의 실행(execution)을 잠시 중단하고 호출자에게 결과를 전달하게끔 하는 키워드다. 따라서 제너레이터가 반환한 이터레이터의 <code class=\"language-text\">next</code>를 호출하면 <code class=\"language-text\">yield</code> 뒤에 위치한 표현식을 평가하고 해당 위치에서 함수를 일시 중지 상태로 전환시킨다.</p>\n<p>또한 <code class=\"language-text\">yield</code> 키워드는 호출자에게 값을 전달하는 데에도 이용되지만, 호출자로부터 값을 전달받는 것에도 이용할 수 있다. 우선은 호출자에게 값을 전달하는 경우부터 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// (1)</span>\n<span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">generator</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">yield</span> arg<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> iterator <span class=\"token operator\">=</span> <span class=\"token function\">generator</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// (2)</span>\n\n<span class=\"token keyword\">const</span> r1 <span class=\"token operator\">=</span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span> <span class=\"token comment\">// (3)</span>\n\n<span class=\"token keyword\">const</span> r2 <span class=\"token operator\">=</span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span> <span class=\"token comment\">// (4)</span></code></pre></div>\n<p><strong>(1)</strong> 런타임에 들어가기 직전 함수 객체를 생성하고 식별자에 바인딩한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">┌──────────────┐\n│  Global E.C  │\n│ ┈┈┈┈┈┈┈┈┈┈┈  │\n│ generator: ● ┼────→ function* <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n│ iterator <span class=\"token builtin class-name\">:</span> - │\n│ r1       <span class=\"token builtin class-name\">:</span> - │\n│ r2       <span class=\"token builtin class-name\">:</span> - │\n└──────────────┘</code></pre></div>\n<p><strong>(2)</strong> generator가 호출되면서 실행 컨텍스트가 콜 스택에 <code class=\"language-text\">push</code>되고, iterator를 반환하면서 generator의 실행 컨텍스트는 <code class=\"language-text\">pop</code> 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">┌──────────────┐                     ┌──────────┐\n│generator E.C │←────────────────────│ iterator │\n│ ┈┈┈┈┈┈┈┈┈┈┈  │                     │ ┈┈┈┈┈┈┈┈ │\n│ arg: <span class=\"token string\">\"hello\"</span> │                     │  next<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  │\n└──────────────┘ ┌──────────────────→└──────────┘\n┌──────────────┐ │\n│  Global E.C  │ │\n│ ┈┈┈┈┈┈┈┈┈┈┈  │ │\n│ generator: ● ┼─┼───→ function* <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n│ iterator <span class=\"token builtin class-name\">:</span> ● ┼─┘\n│ r1       <span class=\"token builtin class-name\">:</span> - │\n│ r2       <span class=\"token builtin class-name\">:</span> - │\n└──────────────┘</code></pre></div>\n<p>하지만 generator의 실행 컨텍스트는 여전히 메모리에 상주하게 되는데, generator 자체가 실행을 재개할 수 있어야 하기 때문에 iterator가 모든 순회를 마치기 전까지는 계속 참조되기 때문이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">┌──────────────┐\n│  Global E.C  │\n│ ┈┈┈┈┈┈┈┈┈┈┈  │\n│ generator: ● ┼────→ function* <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n│ iterator <span class=\"token builtin class-name\">:</span> ● ┼────────────┐\n│ r1       <span class=\"token builtin class-name\">:</span> - │            │\n│ r2       <span class=\"token builtin class-name\">:</span> - │       ┌──────────┐       ┌──────────────┐\n└──────────────┘       │ iterator │       │generator E.C │\n                       │ ┈┈┈┈┈┈┈┈ │ ────→ │ ┈┈┈┈┈┈┈┈┈┈┈  │\n                       │  next<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  │       │ arg: <span class=\"token string\">\"hello\"</span> │\n                       └──────────┘       └──────────────┘</code></pre></div>\n<p><strong>(3)</strong> iterator의 <code class=\"language-text\">next</code>가 호출되면 다시 콜 스택에 <code class=\"language-text\">push</code>되었다가 <code class=\"language-text\">yield</code> 키워드 뒤의 표현식을 평가할 때까지 실행되었다가 평가한 값을 반환하게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">┌──────────────┐                     ┌──────────┐\n│generator E.C │←────────────────────│ iterator │\n│ ┈┈┈┈┈┈┈┈┈┈┈  │                     │ ┈┈┈┈┈┈┈┈ │\n│ arg: <span class=\"token string\">\"hello\"</span> │                     │  next<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  │\n└──────────────┘ ┌──────────────────→└──────────┘\n┌──────────────┐ │\n│  Global E.C  │ │\n│ ┈┈┈┈┈┈┈┈┈┈┈  │ │\n│ generator: ● ┼─┼───→ function* <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n│ iterator <span class=\"token builtin class-name\">:</span> ● ┼─┘\n│ r1       <span class=\"token builtin class-name\">:</span> - │\n│ r2       <span class=\"token builtin class-name\">:</span> - │\n└──────────────┘</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">┌──────────────┐\n│  Global E.C  │\n│ ┈┈┈┈┈┈┈┈┈┈┈  │\n│ generator: ● ┼────→ function* <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n│ iterator <span class=\"token builtin class-name\">:</span> ● ┼────────────┐\n│ r1:   <span class=\"token string\">\"hello\"</span>│            │\n│ r2       <span class=\"token builtin class-name\">:</span> - │       ┌──────────┐       ┌──────────────┐\n└──────────────┘       │ iterator │       │generator E.C │\n                       │ ┈┈┈┈┈┈┈┈ │ ────→ │ ┈┈┈┈┈┈┈┈┈┈┈  │\n                       │  next<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  │       │ arg: <span class=\"token string\">\"hello\"</span> │\n                       └──────────┘       └──────────────┘</code></pre></div>\n<p><strong>(4)</strong> 제너레이터 함수 몸체 내부에서 <code class=\"language-text\">return</code>을 통해 값을 반환하는 것 역시 가능하다. 하지만 <code class=\"language-text\">return</code> 문을 실행하면 Iteration Result 객체의 <code class=\"language-text\">done</code>은 <code class=\"language-text\">true</code>가 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">┌──────────────┐                     ┌──────────┐\n│generator E.C │←────────────────────│ iterator │\n│ ┈┈┈┈┈┈┈┈┈┈┈  │                     │ ┈┈┈┈┈┈┈┈ │\n│ arg: <span class=\"token string\">\"hello\"</span> │                     │  next<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  │\n└──────────────┘ ┌──────────────────→└──────────┘\n┌──────────────┐ │\n│  Global E.C  │ │\n│ ┈┈┈┈┈┈┈┈┈┈┈  │ │\n│ generator: ● ┼─┼───→ function* <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n│ iterator <span class=\"token builtin class-name\">:</span> ● ┼─┘\n│ r1:   <span class=\"token string\">\"hello\"</span>│\n│ r2       <span class=\"token builtin class-name\">:</span> - │\n└──────────────┘</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">┌──────────────┐\n│  Global E.C  │\n│ ┈┈┈┈┈┈┈┈┈┈┈  │\n│ generator: ● ┼────→ function* <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n│ iterator <span class=\"token builtin class-name\">:</span> ● ┼────────────┐\n│ r1:   <span class=\"token string\">\"hello\"</span>│            │\n│ r2:        <span class=\"token number\">2</span> │       ┌──────────┐       ┌──────────────┐\n└──────────────┘       │ iterator │       │generator E.C │\n                       │ ┈┈┈┈┈┈┈┈ │ ────→ │ ┈┈┈┈┈┈┈┈┈┈┈  │\n                       │  next<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  │       │ arg: <span class=\"token string\">\"hello\"</span> │\n                       └──────────┘       └──────────────┘</code></pre></div>\n<p>이번에는 호출자가 제너레이터 함수 측으로 값을 전달하는 방법을 살펴보자. 우선 제너레이터 함수의 인수로 전달하는 방법 외에도 <code class=\"language-text\">next</code>의 인수로 전달하는 방법이 존재한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">generator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> first <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> second <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> first <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">yield</span> second <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> iterator <span class=\"token operator\">=</span> <span class=\"token function\">generator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\niterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// (1) { value: 1, done: false }</span>\niterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// (2) { value: 6, done: false }</span>\niterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// (3) { value: 8, done: false }</span></code></pre></div>\n<p><strong>(1)</strong> 자바스크립트에서 할당문의 경우 우측이 먼저 평가되므로 <code class=\"language-text\">yield</code>에서 실행이 중단된다는 것은 우측의 표현식까지만 평가되고 할당은 이루어지지 않은 상태라는 의미이다. 이제 그 다음 <code class=\"language-text\">next</code>를 호출할 때 할당이 이루어지게 된다.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { value: 1, done: false }</span>\n\n<span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">generator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//           ↓ [resume]</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> first <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></span>  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>(2)</strong> 여기서는 <code class=\"language-text\">next</code>를 호출할 때 인수를 전달하게 된다. 그러면 제너레이터 함수 몸체에서 실행을 멈추었던 위치부터 실행을 재개하게 된다. 단 이때 할당 이전에 수행된 <code class=\"language-text\">yield</code>는 전달한 인수로 대체된다.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { value: 6, done: false }</span>\n\n<span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">generator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> first <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//            ↓ [resume]</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> second <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token number\">4</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></span>  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>(3)</strong> 이 지점에서 <strong>주의</strong>해야 하는데, 다음 <code class=\"language-text\">next</code> 호출 시 <code class=\"language-text\">second</code>에 할당되는 값은 <code class=\"language-text\">6</code>이 아니라 호출 때 전달한 인수라는 것이다.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { value: 8, done: false }</span>\n\n<span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">generator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> first <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> second <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">yield</span> <span class=\"token number\">5</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"asynchronous-task-running\" style=\"position:relative;\"><a href=\"#asynchronous-task-running\" aria-label=\"asynchronous task running permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Asynchronous Task Running</h2>\n<p>제너레이터가 가장 강력한 힘을 발휘하는 곳은 바로 비동기 상황이다. 우선 제너레이터를 이용하여 비동기 상황을 제어하는 경우를 가급적 단순화시키기 위해 <code class=\"language-text\">setTimeout</code>을 이용하여 비동기 호출을 모방해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getFirstData</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token string\">'first data'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getSecondData</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token string\">'second data'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이 두 함수는 전달한 <code class=\"language-text\">ms</code> 이후에 전달받은 콜백 함수에 값을 인수로 전달하여 호출하는 함수이다. 그렇다면 제너레이터를 이용하지 않고 두 함수를 사용하는 사례를 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">getFirstData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">data received </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>data<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">getSecondData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">data received </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>data<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [after 1,000ms]</span>\n<span class=\"token comment\">// data received first data</span>\n<span class=\"token comment\">// data received second data</span></code></pre></div>\n<p>위 코드에서 콜백을 사용하여야 하는 이유와 콜백 패턴이 가질 수 있는 문제점들은 차치하고 우선은 제너레이터를 이용하여 비동기 호출을 제어하는 방식을 살펴보자. <code class=\"language-text\">yield</code>는 함수 실행을 잠시 멈추었다가 다시 재개하기 이전에 <code class=\"language-text\">next</code> 메서드가 호출되기를 대기하고 있기 때문에 콜백을 이용하지 않더라도 비동기적인 호출을 관리할 수 있다. 그렇다면 우선 두 함수가 데이터를 전달하는 시점에 콜백 함수 대신 이터레이터를 사용하게끔 바꾸어보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> iterator<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getFirstData</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token string\">'first data'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getSecondData</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token string\">'second data'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>다시 한번 제너레이터 함수의 정의를 생각해보면 호출 시 이터레이터를 반환하는 함수이다. 또한 반환한 이터레이터의 <code class=\"language-text\">next</code>를 호출하면 <code class=\"language-text\">yield</code> 키워드 우측의 표현식을 평가한 뒤 반환하게 된다.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">generator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> firstData <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">getFirstData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">const</span> secondData <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">getSecondData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">firstData: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>firstData<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">secondData: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>secondData<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\niterator <span class=\"token operator\">=</span> <span class=\"token function\">generator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\niterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// firstData: first data</span>\n<span class=\"token comment\">// secondData: second data</span></code></pre></div>\n<p><code class=\"language-text\">generator</code> 함수 몸체를 살펴보면 분명 비동기 상황을 다루는 함수 호출이지만 마치 동기 함수 호출처럼 보이는 것을 확인할 수 있을 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token punctuation\">[</span>시간<span class=\"token punctuation\">]</span>\n──────────────────<span class=\"token punctuation\">[</span>1000ms<span class=\"token punctuation\">]</span>───────────────<span class=\"token punctuation\">[</span>2000ms<span class=\"token punctuation\">]</span>\nnext<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  ↓\ngetFirstData<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>──→ next<span class=\"token punctuation\">(</span><span class=\"token string\">\"first data\"</span><span class=\"token punctuation\">)</span>\n                    ↓\n                 firstData\n                    ↓\n               getSecondData<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> ────────→ next<span class=\"token punctuation\">(</span><span class=\"token string\">\"second data\"</span><span class=\"token punctuation\">)</span>\n                                            ↓\n                                       secondData\n                                            ↓\n                                       console.log</code></pre></div>\n<blockquote>\n<p>중요한 점은 <code class=\"language-text\">yield</code> 우측의 표현식까지 평가한 이후 함수 실행을 중단하더라도 <code class=\"language-text\">next</code>를 호출한 호출자는 <strong>blocking</strong>되지 않는다는 점이다.</p>\n</blockquote>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'non-blocking'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token comment\">// non-blocking</span>\n<span class=\"token comment\">// ....results</span></code></pre></div>\n<p>현재 상황에서는 비동기와 동기를 구분할 수 있는 방법은 이터레이터의 <code class=\"language-text\">next</code>를 호출한 결과가 함수인 지 여부로 식별할 수 있을 것이다. 이러한 상황에서 제너레이터 함수를 호출하고 반환된 이터레이터의 <code class=\"language-text\">next</code> 메서드를 호출해 줄 수 있는 함수를 <strong>Task Runner</strong>라 한다면 콜백 함수를 통해 비동기 상황을 제어하는 경우에는 Task Runner 역시 해당 콜백 함수가 어떻게 동작하는 지에 대해 이해하고 있어야 한다는 점이다. 즉, 모든 비동기 호출에 전달되는 콜백 함수의 시그니처나 동작이 동일하다는 전제가 성립하지 않는다면 각각의 콜백 함수에 치중된 Task Runner의 구현이 필요할 수 밖에 없다.</p>\n<blockquote>\n<p>다만 redux-thunk에서 <code class=\"language-text\">action</code>이 plain object 대신 함수인 경우 비동기 상황이라 가정할 수 있는 이유는 동일한 인터페이스가 보장되기 때문인 것이라 생각한다.</p>\n</blockquote>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">createThunkMiddleware</span><span class=\"token punctuation\">(</span>extraArgument<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> dispatch<span class=\"token punctuation\">,</span> getState <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> action <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>      <span class=\"token keyword\">return</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span>dispatch<span class=\"token punctuation\">,</span> getState<span class=\"token punctuation\">,</span> extraArgument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>따라서 콜백 함수 대신 ES6에 도입된 Promise를 사용하여 비동기 상황을 제어한다면 Promise의 인터페이스를 사용하여 보다 일관된 방식으로 Task Running을 수행할 수 있을 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">async</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>generator<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> iterator <span class=\"token operator\">=</span> <span class=\"token function\">generator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onResolved</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 비동기 상황은 Promise를 통해 제어하므로 일관된 인터페이스를 갖는다.</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span>done\n      <span class=\"token operator\">?</span> result<span class=\"token punctuation\">.</span>value\n      <span class=\"token operator\">:</span> result<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>onResolved<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> onResolved<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">async</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">async</code> 키워드를 사용한 함수의 경우에는 명시적으로 <code class=\"language-text\">Promise</code>를 반환하지 않더라도 암묵적으로 반환 값을 Promise로 래핑한 값을 반환한다는 차이는 존재하지만 기본적인 형태를 살펴보면 <code class=\"language-text\">async</code>라는 함수 명을 <code class=\"language-text\">async</code> 키워드로, <code class=\"language-text\">yield</code>는 <code class=\"language-text\">await</code>으로 바꾸면 일반적으로 우리가 사용하는 <code class=\"language-text\">async/await</code> 함수의 패턴과 거의 동일한 것을 확인할 수 있다. 거기에 추가적으로 <code class=\"language-text\">await</code> 키워드를 사용할 수 있는 대상이 Promise로 한정되는 것 역시 Task Runner가 각각의 콜백에 특화된 구현 대신 일관된 인터페이스를 사용하기 위함이 아닐까 추측해본다.</p>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ul>\n<li><a href=\"https://www.amazon.com/Beginning-Functional-JavaScript-Programming-EcmaScript-ebook/dp/B07L68BWCW/ref=sr_1_1?dchild=1&#x26;keywords=beginning+functional+javascript+programming&#x26;qid=1629291843&#x26;s=books&#x26;sr=1-1\">Beginning Functional JavaScript</a></li>\n<li><a href=\"https://www.amazon.com/JavaScript-Definitive-Most-Used-Programming-Language/dp/1491952024/ref=sr_1_1?dchild=1&#x26;keywords=javascript+definitive+guide&#x26;qid=1629291907&#x26;s=books&#x26;sr=1-1\">JavaScript The Definitive Guide</a></li>\n<li><a href=\"https://www.amazon.com/Secrets-JavaScript-Ninja-John-Resig/dp/1617292850/ref=sr_1_1?dchild=1&#x26;keywords=secret+ninja&#x26;qid=1629291950&#x26;s=books&#x26;sr=1-1\">Secrets of the JavaScript Ninja</a></li>\n<li><a href=\"https://www.amazon.com/Understanding-ECMAScript-Definitive-JavaScript-Developers/dp/1593277571/ref=sr_1_1?dchild=1&#x26;keywords=understanding+ecmascript&#x26;qid=1629291996&#x26;s=books&#x26;sr=1-1\">Understanding ECMAScript 6</a></li>\n<li><a href=\"https://github.com/reduxjs/redux-thunk/blob/master/src/index.js\">redux-thunk</a></li>\n</ul>","frontmatter":{"date":"August 18, 2021","title":"async/await","categories":"자바스크립트","author":"Baek2back","emoji":"🧩"},"fields":{"slug":"/async-await/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://Baek2back.github.io","comments":{"utterances":{"repo":"Baek2back/Baek2back.github.io"}}}}},"pageContext":{"slug":"/collection-processing-with-async/","nextSlug":"/async-await/","prevSlug":""}},"staticQueryHashes":["1073350324","2938748437"]}